/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";function e(e){return Math.round(t(e))}function t(e){return 1200/e}function r(e,t=e){return Math.round(7*s(e,t))}function s(e,r){return t(e)*function(e,t){return(50*e-31*t)/(19*t)}(e,r)}void 0===String.prototype.trim&&(String.prototype.trim=function(){return String(this).replace(/^\s+|\s+$/g,"")});var n={},i={},a={"<AA>":".-.-","<AR>":".-.-.","<AS>":".-...","<BK>":"-...-.-","<BT>":"-...-","<CL>":"-.-..-..","<CT>":"-.-.-","<DO>":"-..---","<KN>":"-.--.","<SK>":"...-.-","<VA>":"...-.-","<SN>":"...-.","<VE>":"...-.","<SOS>":"...---..."},o={},u={};for(var h in n)u[h]=n[h],i[n[h]]=h,o[n[h]]=h;for(var l in a)u[l]=a[l],o[a[l]]=l;var m=function(e){return(e=(e=(e=(e=(e=(e=e.replace(/\|/g,"/")).replace(/\//g," / ")).replace(/\s+/g," ")).replace(/(\/ )+\//g,"/")).replace(/_/g,"-")).replace(/^\s+/,"")).replace(/\s+$/,"")};class c extends class{constructor(e=!0){this.useProsigns=e,this.input="",this.output="",this.morse="",this.message="",this.inputWasMorse=void 0,this.hasError=void 0}translate(e,t){var r;if(void 0===t&&(t=function(e){return null!==(e=m(e)).match(/^[/.-][ /.-]*$/)}(e)),t?(this.inputWasMorse=!0,r=function(e,t=!0){var r={morse:"",message:"",hasError:!1};if(""===(e=m(e)))return r;var s,n,a,u=e.split(" ");s=t?o:i;for(var h=0;h<u.length;h++)void 0===(n=s[a=u[h]])?(r.morse+="#"+a+"# ",r.message+="#",r.hasError=!0):(r.morse+=a+" ",r.message+=n);return r.morse=r.morse.slice(0,r.morse.length-1),r}(e,this.useProsigns)):(this.inputWasMorse=!1,r=function(e,t=!0){var r={morse:"",message:"",hasError:!1};if(""===(e=function(e){return(e=(e=e.toUpperCase()).trim()).replace(/\s+/g," ")}(e)))return r;for(var s,i,a,o,h,l,m=[];e.length>0;)i=1,t&&(s=e.match(/^<...?>/))&&(i=s[0].length),m.push(e.slice(0,i)),e=e.slice(i,e.length);for(a=t?u:n,o=0;o<m.length;o++)void 0===(h=a[l=m[o]])?(r.message+="#"+l+"#",r.morse+="# ",r.hasError=!0):(r.message+=l,r.morse+=h+" ");return r.morse=r.morse.slice(0,r.morse.length-1),r}(e,this.useProsigns)),this.morse=r.morse,this.message=r.message,this.inputWasMorse?(this.input=this.morse,this.output=this.message):(this.input=this.message,this.output=this.morse),this.hasError=r.hasError,this.hasError)throw new Error("Error in input");return this.output}clearError(){this.inputWasMorse||(this.message=this.message.replace(/#[^#]*?#/g,"")),this.morse=this.morse.replace(/#/g,""),this.hasError=!1}}{constructor(e=!0,t=20,r=t){super(e),this.wpm=t,this.fwpm=r}set wpm(e){this._wpm=e,e<this._fwpm&&(this._fwpm=e)}get wpm(){return this._wpm}set fwpm(e){this._fwpm=e,e>this._wpm&&(this._wpm=e)}get fwpm(){return this._fwpm}get wordSpace(){return r(this._wpm,this._fwpm)}getTimings(){return c.getTimingsGeneral(e(this._wpm),(n=this._wpm,Math.round(3*t(n))),function(t){return e(t)}(this._wpm),function(e,t=e){return Math.round(3*s(e,t))}(this._wpm,this._fwpm),r(this._wpm,this._fwpm),this.morse);var n}static getTimingsGeneral(e,t,r,s,n,i){i=(i=i.replace(/ \/ /g,"/")).replace(/([\.\-])(?=[\.\-])/g,"$1+");for(var a=[],o=0;o<i.length;o++)switch(i[o]){case".":a.push(e);break;case"-":a.push(t);break;case"+":a.push(-r);break;case" ":a.push(-s);break;case"/":a.push(-n)}return a}getDuration(){for(var e=this.getTimings(),t=0,r=0;r<e.length;r++)t+=Math.abs(e[r]);return t}}class p extends c{constructor(e,t,r,s=550,n=8e3){super(e,t,r),this.frequency=s,this.sampleRate=n}getSample(e=0){return p.getSampleGeneral(this.getTimings(),this.frequency,this.sampleRate,e)}static getSampleGeneral(e,t,r,s=0){var n=[];if(0===e.length)return[];e.push(-Math.max(5,s));for(var i,a,o=1.5*t/r,u=Math.SQRT1_2,h=Math.sin(2*Math.PI*o),l=Math.cos(2*Math.PI*o),m=h/(2*Math.pow(10,u/20)),c=1+m,p=.5*(1-l)/c,g=(1-l)/c,f=.5*(1-l)/c,d=-2*l/c,w=(1-m)/c,v=2*Math.PI*t/r,b=e[0]>0?1:0,S=0,M=0,k=0,A=0,C=0;C<e.length;C+=1){for(var _=r*Math.abs(e[C])/1e3,E=0;E<_;E+=1)a=p*(i=b*Math.sin(E*v))+g*S+f*M-d*k-w*A,n.push(.813*a),M=S,S=i,A=k,k=a;b=1-b}return n}getWAASample(e=0){e=Math.max(5,e);var t=this.getTimings();t.push(-e);var r=window.OfflineAudioContext||window.webkitOfflineAudioContext;if(void 0===r)throw new Error("No OfflineAudioContext class defined");var s=new r(1,this.sampleRate*(this.getDuration()+e)/1e3,this.sampleRate),n=s.createGain();n.gain.setValueAtTime(.813,0);var i=s.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(1.1*this.frequency,0),n.connect(i),i.connect(s.destination);for(var a,o,u=0,h=0;h<t.length;h++)o=Math.abs(t[h])/1e3,t[h]>0&&((a=s.createOscillator()).type="sine",a.frequency.setValueAtTime(this.frequency,u),a.start(u),a.stop(u+o),a.connect(n)),u+=o;return s.startRendering().then((function(e){return e.getChannelData(0)}))}}var g=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},f=function(e){return[255&e,e>>8&255]};console.log("Hello World2");let d=new Audio;window.doPlay=function(e,t,r,s,n){let i=1200/r;console.log(i);let a=7*i,o=new p(!0,t,r,s,8e3);o.translate(e,!1);var u=function(e,t=8e3,r=8){e=function(e){for(var t=[],r=0;r<e.length;r++)t[r]=Math.max(Math.min(128+Math.round(127*e[r]),255),0);return t}(e);var s={chunkId:[82,73,70,70],chunkSize:0,format:[87,65,86,69],subChunk1Id:[102,109,116,32],subChunk1Size:16,audioFormat:1,numChannels:1,sampleRate:t,byteRate:0,blockAlign:0,bitsPerSample:r,subChunk2Id:[100,97,116,97],subChunk2Size:0};return s.blockAlign=s.numChannels*s.bitsPerSample>>3,s.byteRate=s.blockAlign*s.sampleRate,s.subChunk2Size=e.length*(s.bitsPerSample>>3),s.chunkSize=36+s.subChunk2Size,s.chunkId.concat(g(s.chunkSize),s.format,s.subChunk1Id,g(s.subChunk1Size),f(s.audioFormat),f(s.numChannels),g(s.sampleRate),g(s.byteRate),f(s.blockAlign),f(s.bitsPerSample),s.subChunk2Id,g(s.subChunk2Size),16==s.bitsPerSample?function(e){for(var t=[],r=0,s=e.length,n=0;n<s;n++)t[r++]=255&e[n],t[r++]=e[n]>>8&255;return t}(e):e)}(o.getSample(a));d=null,d=new Audio;let h=new Int8Array(u).buffer,l=window.URL.createObjectURL(new Blob([h]));d.src=l,d.addEventListener("ended",(()=>{n()})),d.play()},window.doPause=function(e){d.addEventListener("pause",(()=>{e()})),console.log("ended:"+d.ended),d.ended||d.paused||!d.src?e():d.pause()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,